#include <reg52.h> //包含头文件，一般情况不需要改动，头文件包含特殊功能寄存器的定义
#include <intrins.h>
#include "zlg7289.h"
#include "delay.h"

sbit Ds1302_SCK = P1^4;	//时钟	
sbit Ds1302_SDA = P1^5;	//数据	
sbit Ds1302_RST = P1^6; //DS1302复位
sbit BEEP = P2^0;

#define Ds1302_sec_addr			0x80	//0x81		//秒数据地址	bit1=1时，低功耗，时钟振荡器停止工作；bit1=0时，正常工作。
#define Ds1302_min_addr			0x82	//0x83		//分数据地址
#define Ds1302_hr_addr			0x84	//0x85		//时数据地址	bit7=1时，12小时模式；bit7=0时，24小时模式；
#define Ds1302_date_addr		0x86	//0x87		//日数据地址
#define Ds1302_month_addr		0x88	//0x89		//月数据地址
#define Ds1302_day_addr			0x8a	//0x8b		//星期数据地址
#define Ds1302_year_addr		0x8c	//0x8d		//年数据地址
#define Ds1302_control_addr		0x8e	//0x8f		//控制数据地址		0x80时无法写入DS1302；0x00时可写入；(bit7=1/0,其他全为0；)
#define Ds1302_charger_addr		0x90	//0x91		//涓流充电模式 	 
#define Ds1302_clkburst_addr	0xbe	//0xbf		//时钟突发模式寄存器
#define Ds1302_ramburst_addr	0xfe	//0xff		//RAM突发模式寄存器

//定义标志
bit ReadRTC_Flag;									//读DS1302标志
bit reset;											//显示初始化标志
bit mod;											//模式标志
bit settime;											//切换设置时钟状态标志
bit setbell;										//切换设置闹铃状态标志
bit ring;											//切换闹铃模式状态标志
bit rering;											//闹铃再次可触发标志

static unsigned char Ds1302_time_BCD[8]={0,0,0,20,8,4,13,0};				//秒分时日月周年13-08-19 09:33:00		 BCD码
static unsigned char Ds1302_time[8];										//秒分时日月周年  ds1302内部
static unsigned char Ds1302_display_time[8];								//时间显示缓冲数组
static unsigned char Ds1302_Bell_time_BCD[3]={0,30,6};						//闹铃时间：分-时						 BCD码
static unsigned char Ds1302_Bell_time[3];									//闹铃时间,16进制
static unsigned char Ds1302_Bell_display_time[2];							//闹铃时间显示缓冲数组
static unsigned char setring;												//闹铃设置参数
static unsigned int  shake_num_value,shake_num,shake_display_num;			//摇摇次数以及其显示缓冲
static unsigned char ring_time_BCD,ring_display_time;							//响铃时间以及其显示缓冲
static unsigned char ring_stop_time[2],ring_stop_time_BCD[2];
static unsigned char Key,num,ring_num,ring_display_num;
static char k;
unsigned char b;
/******************************************************************/
/*                    函数声明                                    */
/******************************************************************/
void Ds1302_Write_Byte(unsigned char temp);
void Ds1302_Write( unsigned char address,unsigned char dat );
unsigned char Ds1302_Read ( unsigned char address );
void Ds1302_Read_RTC(void);
void Ds1302_Set_RTC(void);
void Int0_Init(void);
void main_Init(void);		
void com_Init(void);										
//显示函数声明										
void mod0(void);
void mod1(void);
void mod2(void);
void mod3(void);
void mod4(void);
void mod5(void);
//相关设置函数声明
void set_time(char number);
void set_bell_time(char number);
void set_shake_num(char number);
void set_ring_time(char number);
//数据转换函数声明
void bell_changeinBCD(void);
void ring_changeinBCD(void);
//闪烁函数声明
void Flash(char number);

/******************************************************************/
/*                    中断函数                                    */
/******************************************************************/
void INT0_SVC(void) interrupt 0                           
{
	Key=ZLG7289_Key();
	if(Key==0x07)	
	{		
		settime=~settime;
		if(settime) {reset=0;setbell=0;setring=0;k=0;}
		if(!settime) Flash(8);
	}		//改时间设定键 ;按下0-1转换，setmod=1时，闹钟模式为0；k=0；
	if(Key==0x06)	
	{
		setbell=~setbell;		
		if(setbell) {reset=0;settime=0;setring=0;k=0;}
		if(!setbell) Flash(8);
	}	//改闹铃设定键 ;按下0-1转换，setbell=1时，时钟模式为0；k=0;重新闹钟显示参量cpr_bell为0；
	if(Key==0x05)	{if((settime)||(setbell)||(setring!=0)) num=1;}
	if(Key==0x04)	{if((settime)||(setbell)||(setring!=0)) num=2;}
	if(Key==0x03)	{if((settime)||(setbell)||(setring!=0)) num=3;}
	if(Key==0x02)	{if((settime)||(setbell)||(setring!=0)) num=4;}
	if(Key==0x01)	
	{		
		setring++;				
		if(setring!=0)	{reset=0;settime=0;setbell=0;k=0;}		
		if(setring>2) 
		{
			setring=0;		
			Flash(8);
		}
		if(setring==0)	Flash(8);
	}				
	if(Key==0x00)	mod=~mod;reset=0;   
}	   
void delay(unsigned char x)
{
	unsigned char i,m;
	for(i=255;i>0;i--)
		for(m=x;m>0;m--);
}
void ser() interrupt 4
{
	RI=0;
	b=SBUF;	
	if(b==0xaa)
		{
			shake_num--;
			ES=0;
			BEEP=1;
			delay(1000);
			BEEP=0;
			SBUF=0;
			while(!TI);
			TI=0;
			b=0;
			ES=1;
		}	
//	else
//		{
//			ES=0;
//			delay(1000);
//			SBUF=0;
//			while(!TI);
//			TI=0;
//			b=0;
//			ES=1;
//		}	
}
void com_Init(void)
{
	SCON = 0x50;      //REN=1允许串行接受状态，串口工作模式1    	       	   
	    TMOD|= 0x20;      //定时器工作方式2                    
		PCON|= 0x00;                                                          
		//TH1  = 0xFD;     //baud*2  /* reload value 19200、数据位8、停止位1。效验位无 (11.0592) 
		TH1 = 0xFD;		// //baud*2  /*  波特率4800、数据位8、停止位1。效验位无 (12M)
    	TL1 = 0xFD;         
		TR1  = 1;  
		PS	 = 1;                                                           
		ES   = 1;        //开串口中断                  
		EA   = 1;        // 开总中断 
}
/******************************************************************************************************/
/*             								主函数                                                    */
/******************************************************************************************************/
void main(void)    
{
 	//Ds1302_Set_RTC();             //写入时钟值，如果使用备用电池时候，不需要没每次上电写入，此程序应该屏蔽
	ZLG7289_Init();
	Int0_Init();
	com_Init();
	main_Init();
	bell_changeinBCD();
	ring_changeinBCD();	
	ZLG7289_Reset();  
	while(1)
	{
		while(settime)
		{
			set_time(num);
			Flash(k);
			num=0;
			Ds1302_Set_RTC();
			Ds1302_Read_RTC();
			if(mod==0) mod0();
			else mod1();
			delay_10ms(10);			
		}
		while(setbell)
		{								
			set_bell_time(num);
			Flash(k);
			num=0;
			bell_changeinBCD();
			ring_changeinBCD();
			mod2();
			delay_10ms(10);
		}					
		while(setring==1)
		{
			set_shake_num(num);
			shake_num=shake_num_value;
			Flash(k);
			num=0;
			mod4();
			delay_10ms(10);
		}
		while(setring==2)
		{
			set_ring_time(num);
			ring_changeinBCD();
			Flash(k);
			num=0;
			mod5();
			delay_10ms(10);
		} 
		while(ReadRTC_Flag)
		{
		    ReadRTC_Flag=0;
			Ds1302_Read_RTC();
			if((Ds1302_time[0]==Ds1302_Bell_time[0])&&(Ds1302_time[1]==Ds1302_Bell_time[1])&&(Ds1302_time[2]==Ds1302_Bell_time[2]))
				{
					ring=1;
					rering=1;			
					com_Init();
					reset=0;
					BEEP=0;
				}
			while(ring)
			{				
				mod3();
				if((shake_num==0)||((Ds1302_time[1]==ring_stop_time[0])&&(Ds1302_time[2]==ring_stop_time[1])))
				{
					ring=0;
					rering=1;
					shake_num=shake_num_value;					
					BEEP=1;
					reset=0;
				}
				Ds1302_Read_RTC();
			}
			if(mod==0) mod0();else mod1();					
		}
	delay_50ms(10);
	ReadRTC_Flag=1;
	}
}
//****************************************************************************初始化函数
//函数初始化
void main_Init(void)
{
	unsigned char i;
	mod=0;						  //模式初始化 mod是显示时分秒/年月日按键7改;
	settime=0;
	setbell=0;
	setring=0;	
	ring=0;
	rering=0;
	shake_num_value=10;
	shake_num=shake_num_value;
	shake_display_num=shake_num;
	ring_time_BCD=10;
	ring_display_time=ring_time_BCD;
	reset=0;
	for(i=0;i<8;i++)
	Ds1302_display_time[i]=Ds1302_time[i];	
}
//中断初始化
void Int0_Init(void)
{
	EA = 0;
    IT0 = 1; //负边沿触发中断
    EX0 = 1; //允许外部中断
    EA = 1;
}
//****************************************************************************显示函数
//显示模式0：时-分-秒
void mod0(void)
{
	if((reset==0)||(Ds1302_time[2]!=Ds1302_display_time[2]))
	{
		Ds1302_display_time[2]=Ds1302_time[2];
		ZLG7289_Download(0, 0, 0, (Ds1302_display_time[2]/16));
		ZLG7289_Download(0, 1, 0, (Ds1302_display_time[2]&0x0f));
	}	
	if(reset==0) ZLG7289_Download(0, 2, 0, (10));
	if((reset==0)||(Ds1302_time[1]!=Ds1302_display_time[1]))
	{
		Ds1302_display_time[1]=Ds1302_time[1];					    	
		ZLG7289_Download(0, 3, 0, (Ds1302_display_time[1]/16));
		ZLG7289_Download(0, 4, 0, (Ds1302_display_time[1]&0x0f));
	}
	if(reset==0) ZLG7289_Download(0, 5, 0, (10));
	ZLG7289_Download(0, 6, 0, (Ds1302_time[0]/16));
	ZLG7289_Download(0, 7, 0, (Ds1302_time[0]&0x0f));
	if(reset==0)	reset=1;
	delay_1ms(10);		
}
//显示模式1：年-月-日
void mod1(void)
{
	if((reset==0)||(Ds1302_time[6]!=Ds1302_display_time[6]))
	{
		Ds1302_display_time[6]=Ds1302_time[6];
		ZLG7289_Download(0, 0, 0, (Ds1302_display_time[6]/16));	
		ZLG7289_Download(0, 1, 0, (Ds1302_display_time[6]&0x0f));
	}
	if(reset==0) ZLG7289_Download(0, 2, 0, (10));	
	if((reset==0)||(Ds1302_time[4]!=Ds1302_display_time[4]))
	{
		Ds1302_display_time[4]=Ds1302_time[4];				    	
		ZLG7289_Download(0, 3, 0, (Ds1302_display_time[4]/16));
		ZLG7289_Download(0, 4, 0, (Ds1302_display_time[4]&0x0f));
	}
	if(reset==0) ZLG7289_Download(0, 5, 0, (10));
	if((reset==0)||(Ds1302_time[3]!=Ds1302_display_time[3]))
	{
		Ds1302_display_time[3]=Ds1302_time[3];
		ZLG7289_Download(0, 6, 0, (Ds1302_display_time[3]/16));
		ZLG7289_Download(0, 7, 0, (Ds1302_display_time[3]&0x0f));
	}
	if(reset==0)	reset=1;
	delay_1ms(10);		
}
//显示模式3：显示闹铃时间:时-分---
void mod2(void)		  
{
	if((reset==0)||(Ds1302_Bell_time[2]!=Ds1302_Bell_display_time[1]))
	{
		Ds1302_Bell_display_time[1]=Ds1302_Bell_time[2];
		ZLG7289_Download(0, 0, 0, (Ds1302_Bell_display_time[1]/16));	
		ZLG7289_Download(0, 1, 0, (Ds1302_Bell_display_time[1]&0x0f));
	}
	if(reset==0) ZLG7289_Download(0, 2, 0, (10));
	if((reset==0)||(Ds1302_Bell_time[1]!=Ds1302_Bell_display_time[0]))
	{
		Ds1302_Bell_display_time[0]=Ds1302_Bell_time[1];
		ZLG7289_Download(0, 3, 0, (Ds1302_Bell_display_time[0]/16));	
		ZLG7289_Download(0, 4, 0, (Ds1302_Bell_display_time[0]&0x0f));
	}
	if(reset==0) 
	{
		ZLG7289_Download(0, 5, 0, (10));
		ZLG7289_Download(0, 6, 0, (10));
		ZLG7289_Download(0, 7, 0, (10));
	}
	if(reset==0) reset=1;
	delay_1ms(10);
}
//摇摇显示
void mod3(void)
{
	if((reset==0)||shake_num!=shake_display_num)
	{
		shake_display_num=shake_num;
		ZLG7289_Download(0, 0, 0, (shake_display_num/100));
		ZLG7289_Download(0, 1, 0, ((shake_display_num/10)%10));
		ZLG7289_Download(0, 2, 0, (shake_display_num%10));
	}
	if(reset==0)
	{
		ZLG7289_Download(0, 3, 0, (10));
		ZLG7289_Download(0, 4, 0, (10));	
		ZLG7289_Download(0, 5, 0, (10));
		ZLG7289_Download(0, 6, 0, (10));
		ZLG7289_Download(0, 7, 0, (10));
	}	
	if(reset==0)	reset=1;
}
//摇摇设置显示:次数	   
void mod4(void)
{
	if((reset==0)||(shake_num_value!=shake_display_num))
	{
		shake_display_num=shake_num_value;
		ZLG7289_Download(0, 0, 0, (shake_display_num/100));
		ZLG7289_Download(0, 1, 0, ((shake_display_num/10)%10));
		ZLG7289_Download(0, 2, 0, (shake_display_num%10));
	}
	if(reset==0)
	{		
		ZLG7289_Download(0, 3, 0, (10));
		ZLG7289_Download(0, 4, 0, (10));	
		ZLG7289_Download(0, 5, 0, (10));
		ZLG7289_Download(0, 6, 0, (10));
		ZLG7289_Download(0, 7, 0, (10));
	}	
	if(reset==0)	reset=1;
	delay_10ms(10);
}
//闹铃延时显示:闹铃延续时间
void mod5(void)
{
	if((reset==0)||(ring_time_BCD!=ring_display_time))
	{
		ring_display_time=ring_time_BCD;
		ZLG7289_Download(0, 0, 0, (ring_display_time/10));
		ZLG7289_Download(0, 1, 0, (ring_display_time%10));
		
	}
	if(reset==0)
	{	
		ZLG7289_Download(0, 2, 0, (10));	
		ZLG7289_Download(0, 3, 0, (10));
		ZLG7289_Download(0, 4, 0, (10));	
		ZLG7289_Download(0, 5, 0, (10));
		ZLG7289_Download(0, 6, 0, (10));
		ZLG7289_Download(0, 7, 0, (10));
	}	
	if(reset==0)	reset=1;
	delay_10ms(10);
}


//****************************************************************************************设置函数
//设置正常时间
void set_time(unsigned char number)
{
	switch(number)
    {
/*左移*/case 1:k--;if(k<0) {k=7;mod=~mod;reset=0;};if(k==2) k=1;if(k==5) k=4;break;
/*右移*/case 2:k++;if(k>7) {k=0;mod=~mod;reset=0;};if(k==2) k=3;if(k==5) k=6;break;
/*上移*/case 3:
			if(mod==0)
			{
				//k=0	时[2]
				if(k==0)
				{	
					Ds1302_time_BCD[2]+=10;				
					if((Ds1302_time_BCD[2]>23)&&(Ds1302_time_BCD[2]<30))	Ds1302_time_BCD[2]=23;
					if(Ds1302_time_BCD[2]>=30)	Ds1302_time_BCD[2]=(Ds1302_time_BCD[2]%10);
				}
				//k=1	时[2]
				if(k==1)
				{
					Ds1302_time_BCD[2]++;
					if(Ds1302_time_BCD[2]>23)	Ds1302_time_BCD[2]=0;
				}																 
				//k=3	分[1]	
				if(k==3)	Ds1302_time_BCD[1]+=10;
				//k=4	分[1]				
				if(k==4)	Ds1302_time_BCD[1]++;					
				if(Ds1302_time_BCD[1]>=60)	Ds1302_time_BCD[1]=(Ds1302_time_BCD[1]%10);
				//k=6	秒[0]
				if(k==6)	Ds1302_time_BCD[0]+=10;
				//k=7	秒[0]
				if(k==7)	Ds1302_time_BCD[0]++;
				if(Ds1302_time_BCD[0]>=60) 	Ds1302_time_BCD[0]=(Ds1302_time_BCD[0]%10);
			}
			if(mod==1)
			{	   
				//k=0	年[6]
				if(k==0)	Ds1302_time_BCD[6]+=10;
				//k=1	年[6]
				if(k==1)	Ds1302_time_BCD[6]++;
				//k=3	月[4]
				if(k==3)	Ds1302_time_BCD[4]+=10;								
				if((k==3)&&(Ds1302_time_BCD[4]>12)&&(Ds1302_time_BCD[4]<=20))	Ds1302_time_BCD[4]=12;
				if((k==3)&&(Ds1302_time_BCD[4]>20))	Ds1302_time_BCD[4]=(Ds1302_time_BCD[4]%10);
				//k=4	月[4]
				if(k==4)	Ds1302_time_BCD[4]++;
				if((k==4)&&(Ds1302_time_BCD[4]>12))	Ds1302_time_BCD[4]=1;
				//k=6	日[3]
				if(k==6)	Ds1302_time_BCD[3]+=10;							
				if((k==6)&&(Ds1302_time_BCD[3]<40)&&(Ds1302_time_BCD[3]>31))	Ds1302_time_BCD[3]=31;
				if((k==6)&&(Ds1302_time_BCD[3]>=40))	Ds1302_time_BCD[3]=(Ds1302_time_BCD[3]%10);
				//k=7	日[3]
				if(k==7)	Ds1302_time_BCD[3]++;
				if((k==7)&&(Ds1302_time_BCD[3]>31))	Ds1302_time_BCD[3]=1;
			}
			break;
/*下移*/case 4:
			if(mod==0)
			{
				//k=0	时[2]
				if(k==0)
				{									
					if(Ds1302_time_BCD[2]<10)
					{
						if(Ds1302_time_BCD[2]>=4)	Ds1302_time_BCD[2]=23;
						if(Ds1302_time_BCD[2]<4)	Ds1302_time_BCD[2]+=20;
					}
					else	if(Ds1302_time_BCD[2]>=10)	Ds1302_time_BCD[2]-=10;			
				}
				//k=1	时[2]				
				if(k==1)
				{
					if(Ds1302_time_BCD[2]==0)	Ds1302_time_BCD[2]=23;
					else	if(Ds1302_time_BCD[2]>0)	Ds1302_time_BCD[2]--;					 
				}
				//k=3	分[1]
				if(k==3)
				{
					if(Ds1302_time_BCD[1]>=10)	Ds1302_time_BCD[1]-=10;
					else	if(Ds1302_time_BCD[1]<10)	Ds1302_time_BCD[1]+=50; 
				}
				//k=4	分[1]
				if(k==4)
				{
					if(Ds1302_time_BCD[1]==0)	Ds1302_time_BCD[1]=59;
					else	if(Ds1302_time_BCD[1]>0)	Ds1302_time_BCD[1]--; 
				}
				//k=6	秒[0]
				if(k==6)
				{
					if(Ds1302_time_BCD[0]>=10)	Ds1302_time_BCD[0]-=10;
					else	if(Ds1302_time_BCD[0]<10)	Ds1302_time_BCD[0]+=50; 
				}
				//k=7	秒[0]
				if(k==7)
				{	
					if(Ds1302_time_BCD[0]==0)	Ds1302_time_BCD[0]=59;
					else	if(Ds1302_time_BCD[0]>0)	Ds1302_time_BCD[0]--;
				}
			}
			if(mod==1)
			{	
				//k=0	年[6]	
				if(k==0)
				{
				 	if(Ds1302_time_BCD[6]<10)	Ds1302_time_BCD[6]+=30;
					else	if(Ds1302_time_BCD[6]>=10)	Ds1302_time_BCD[6]-=10;	
				}  
				//k=1	年[6] 				
				if(k==1)
				{
					if(Ds1302_time_BCD[6]==0)	Ds1302_time_BCD[6]=30;	
					else	if(Ds1302_time_BCD[6]>0)	Ds1302_time_BCD[6]--;
				}
				//k=3	月[4] 
				if(k==3)
				{
					if(Ds1302_time_BCD[4]<10)
					{
						if(Ds1302_time_BCD[4]>2)	Ds1302_time_BCD[4]=12;
						if(Ds1302_time_BCD[4]<=2) 	Ds1302_time_BCD[4]+=10;
					}
					else	
					{
						if(Ds1302_time_BCD[4]==10)	Ds1302_time_BCD[4]=1;
						if(Ds1302_time_BCD[4]>10)	Ds1302_time_BCD[4]-=10;
					}
				}
				//k=4	月[4]
				if(k==4)
				{
					if(Ds1302_time_BCD[4]==1)	Ds1302_time_BCD[4]=12;
					else	if(Ds1302_time_BCD[4]>1)	Ds1302_time_BCD[4]--;
				}
				//k=6	日[3]
				if(k==6)
				{
					if(Ds1302_time_BCD[3]<10)
					{
						if(Ds1302_time_BCD[3]>1)	Ds1302_time_BCD[3]=31;
						if(Ds1302_time_BCD[3]<=1)	Ds1302_time_BCD[3]+=30;
					}
					else	
					{
						if(Ds1302_time_BCD[3]==10) Ds1302_time_BCD[3]=1;
						if(Ds1302_time_BCD[3]>10) Ds1302_time_BCD[3]-=10;			
					}	
				}
				//k=7	日[3]
				if(k==7)
				{
					if(Ds1302_time_BCD[3]==1) Ds1302_time_BCD[3]=31;
					else	if(Ds1302_time_BCD[3]>1)	Ds1302_time_BCD[3]--;
				}
			}
			break;
		default:break;
	}	
}
//设置闹钟时间
void set_bell_time(unsigned char number)
{
	switch(number)
	{
/*左移*/case 1:k--;if(k<0) {k=4;reset=0;};if(k==2) k=1;break;
/*右移*/case 2:k++;if(k>4) {k=0;reset=0;};if(k==2) k=3;break;
/*上移*/case 3:
			//k=0	时[2]
			if(k==0)
			{	
				Ds1302_Bell_time_BCD[2]+=10;				
				if((Ds1302_Bell_time_BCD[2]>23)&&(Ds1302_Bell_time_BCD[2]<30))	Ds1302_Bell_time_BCD[2]=23;
				if(Ds1302_Bell_time_BCD[2]>=30)	Ds1302_Bell_time_BCD[2]=(Ds1302_Bell_time_BCD[2]%10);
			}
			//k=1	时[2]
			if(k==1)
			{
				Ds1302_Bell_time_BCD[2]++;
				if(Ds1302_Bell_time_BCD[2]>23)	Ds1302_Bell_time_BCD[2]=0;
			}																 
			//k=3	分[1]
			if(k==3)	Ds1302_Bell_time_BCD[1]+=10;
			//k=4	分[1]				
			if(k==4)	Ds1302_Bell_time_BCD[1]++;					
			if(Ds1302_Bell_time_BCD[1]>=60)	Ds1302_Bell_time_BCD[1]=(Ds1302_Bell_time_BCD[1]%10);	
			break;
/*下移*/case 4:
			//k=0	时[2]
			if(k==0)
			{									
				if(Ds1302_Bell_time_BCD[2]<10)
				{
					if(Ds1302_Bell_time_BCD[2]>=4)	Ds1302_Bell_time_BCD[2]=23;
					if(Ds1302_Bell_time_BCD[2]<4)	Ds1302_Bell_time_BCD[2]+=20;
				}
				else	if(Ds1302_Bell_time_BCD[2]>=10)	Ds1302_Bell_time_BCD[2]-=10;			
			}
			//k=1	时[2]				
			if(k==1)
			{
				if(Ds1302_Bell_time_BCD[2]==0)	Ds1302_Bell_time_BCD[2]=23;
				else	if(Ds1302_Bell_time_BCD[2]>0)	Ds1302_Bell_time_BCD[2]--;					 
			}
			//k=3	分[1]
			if(k==3)
			{
				if(Ds1302_Bell_time_BCD[1]>=10)	Ds1302_Bell_time_BCD[1]-=10;
				else	if(Ds1302_Bell_time_BCD[1]<10)	Ds1302_Bell_time_BCD[1]+=50; 
			}
			//k=4	分[1]
			if(k==4)
			{
				if(Ds1302_Bell_time_BCD[1]==0)	Ds1302_Bell_time_BCD[1]=59;
				else	if(Ds1302_Bell_time_BCD[1]>0)	Ds1302_Bell_time_BCD[1]--; 
			}
			break;
		default:break;
	}	
}
//设置摇一摇次数
void set_shake_num(char number)
{
	switch(number)
	{
/*左移*/case 1:	k--;if(k<0) k=2;break;
/*右移*/case 2:	k++;if(k>2) k=0;break;
/*上移*/case 3:
			if(k==0)	shake_num_value+=100;				
			if(k==1)	shake_num_value+=10;
			if(k==2)	shake_num_value++;				
			if(shake_num_value>999)	shake_num_value=1;
			break;
/*下移*/case 4:
			if(k==0)
			{
				if(shake_num_value==100)	shake_num_value=1;
				else
				{
					if(shake_num_value<100)	shake_num_value+=900;
					else if(shake_num_value>100)	shake_num_value-=100;
				}
			}			
			if(k==1)
			{	
				if(shake_num_value==10)	shake_num_value=1;
				else
				{
					if(shake_num_value<10)	shake_num_value+=90;
					else if(shake_num_value>10) shake_num_value-=10;
				}
			}
			if(k==2)
			{
				if(shake_num_value==1)	shake_num_value=999;
				else if(shake_num_value>1)	shake_num_value--;
			}
			break;
		default:break;
	}
}
//设置闹铃响的长度
void set_ring_time(char number)
{
	switch(number)
	{
/*左移*/case 1:	k--;	if(k<0) k=1;	break;
/*右移*/case 2:	k++;	if(k>1) k=0;	break;
/*上移*/case 3:
			if(k==0)	ring_time_BCD+=10;				
			if(k==1)	ring_time_BCD++;
			if(ring_time_BCD==70)	ring_time_BCD=1;			
			if(ring_time_BCD>60)	ring_time_BCD=(ring_time_BCD%10);		
			break;
/*下移*/case 4:
			if(k==0)
			{
				if(ring_time_BCD==10)	ring_time_BCD=1;
				else
				{
					if(ring_time_BCD>10)	ring_time_BCD-=10;
					else	if(ring_time_BCD<10)	ring_time_BCD+=50; 
				}
			}
			if(k==1)
			{
				if(ring_time_BCD==1)	ring_time_BCD=60;
				else	if(ring_time_BCD>1)	ring_time_BCD--; 
			}
			break;
		default:break;
	}
}
//****************************************************************************************数据转换函数
//闹钟时间BCD转化
void bell_changeinBCD(void)
{
	unsigned char i,tmp;
	for(i=0;i<3;i++)		//BCD处理
	{       
		tmp=Ds1302_Bell_time_BCD[i]/10;
		Ds1302_Bell_time[i]=Ds1302_Bell_time_BCD[i]%10;
		Ds1302_Bell_time[i]=Ds1302_Bell_time[i]+tmp*16;
	} 
}
//闹钟停止时间BCD转化
void ring_changeinBCD(void)									
{
	unsigned char i,tmp;
	ring_stop_time_BCD[1]=Ds1302_Bell_time_BCD[2];
	ring_stop_time_BCD[0]=Ds1302_Bell_time_BCD[1]+ring_time_BCD;
	if(ring_stop_time_BCD[0]>59)	{ring_stop_time_BCD[0]-=60;ring_stop_time_BCD[1]++;}
	if(ring_stop_time_BCD[1]>23)	ring_stop_time_BCD[1]=0;
	delay_10us();
	for(i=0;i<2;i++)		//BCD处理
	{       
		tmp=ring_stop_time_BCD[i]/10;
		ring_stop_time[i]=ring_stop_time_BCD[i]%10;				
		ring_stop_time[i]=ring_stop_time[i]+tmp*16;
	}
	delay_10us(); 
}
